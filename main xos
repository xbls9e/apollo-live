
//xbl9e (AIM: Cx000000)

#include "stdafx.h"
#include "SystemHooks.h"
#include "Utilities.h"
#include "TitleSpecificHooks.h"
#include "XBLSConfig.h"
#include "Xosc.h"
#include "XamChallengeResponse.h"
#include "ServComm.h"

extern BYTE cpuKeyDigest[];
extern BYTE hvRandomData[];
extern BYTE seshKey[];
extern DWORD supportedVersion;

extern HANDLE hXBLS;

extern DWORD dwUpdateSequence;
extern BOOL crl;
extern BOOL fcrt;
extern BOOL type1KV;
extern BOOL isPlatinum;
extern BOOL isBypassed;
extern BOOL XblsNetInitialized;
extern BOOL RunningFromUSB;
extern BOOL isAuthed;
//extern BOOL fReboot;
extern BOOL hasChallenged;
extern BOOL IsDevkit;
extern BOOL IsUpdating;

extern void printBytes(PBYTE bytes, DWORD len);
extern HRESULT NotifyUserTime();


/*DWORD __declspec( naked ) HvxKeysExecute( QWORD rr3, QWORD rr4, QWORD rr5, QWORD rr6, QWORD rr7, QWORD rr8 )
{
    __asm
        {
			li r0, 0x40
			sc
			blr
        }
}

DWORD fakeXeKeysExecute(BYTE* pBuffer, DWORD dwFileSize, QWORD Salt, QWORD Input2, QWORD Input3, QWORD Input4)
{
	
	DWORD phyAddr = (DWORD)MmGetPhysicalAddress(pBuffer);
	
	return HvxKeysExecute((QWORD)phyAddr, (QWORD) dwFileSize, (QWORD) Salt, Input2, Input3, Input4);
}*/


// Static execution id for titles that don't have one
XEX_EXECUTION_ID xeExecutionIdSpoof;

EXTERN_C DWORD ExecuteSpoofedSupervisorChallenge(DWORD dwTaskParam1, BYTE* pbDaeTableName, DWORD cbDaeTableName, BYTE* pBuffer, DWORD cbBuffer) {
	return CreateXOSCBuffer(dwTaskParam1, pbDaeTableName, cbDaeTableName, (XOSC*)pBuffer, cbBuffer);
}

BOOL SanityCheckXamBuffer(XAM_CHAL_RESP* resp)
{
	//Check to make sure important values are not empty, and make sure a few non-sensitive static values are what they should be.
	if (!IsBufferEmpty(resp->bReserved1, 8))
		return FALSE;
	if (resp->wHvMagic != 0x4E4E)
		return FALSE;
	if (resp->wHvVersion != supportedVersion)
		return FALSE;
	if (resp->wHvQfe != 0)
		return FALSE;
	if (resp->dwBaseKernelVersion != 0x07600000)
		return FALSE;
	if (resp->dwUpdateSequence == 0)
		return FALSE;
	if (resp->dwHvKeysStatusFlags == 0)
		return FALSE;
	if (resp->dwConsoleTypeSeqAllow == 0)
		return FALSE;
	if (resp->qwRTOC == 0)
		return FALSE;
	if (resp->qwHRMOR == 0)
		return FALSE;
	if (IsBufferEmpty(resp->bHvDigest, XECRYPT_SHA_DIGEST_SIZE))
		return FALSE;
	if (IsBufferEmpty(resp->bCpuKeyDigest, XECRYPT_SHA_DIGEST_SIZE))
		return FALSE;
	//if (IsBufferEmpty(resp->bHvECCDigest, XECRYPT_SHA_DIGEST_SIZE))
	//	return FALSE;
	if (IsBufferEmpty(resp->bRandomData, 0x80))
		return FALSE;

	return TRUE;
}

//extern PBYTE hvChal;

QWORD SpoofXamChallenge(BYTE* pBuffer, DWORD dwFileSize, BYTE* Salt, QWORD Input2, QWORD Input3, QWORD Input4) {
	
	while(IsUpdating){};
	
	SERVER_CHAL_REQUEST   chalRequest;
	SERVER_CHAL_RESPONSE* pChalResponse = (SERVER_CHAL_RESPONSE*)pBuffer;
	PXAM_CHAL_RESP pXamChalResp = (PXAM_CHAL_RESP)(pBuffer + 0x20);
	
	DbgPrint("Hooked XAM CHAL");

#ifdef DUMP_XAM_BUFFER
	// We want to dump our xam buffer to compare
	//DebugBreak();
	if(CWriteFile(RunningFromUSB ? PATH_CHAL_DUMP_USB : PATH_CHAL_DUMP_HDD, pBuffer, dwFileSize) == FALSE) {
		DbgPrint("SpoofXamChallenge - Failed to dump chal buffer");
	} else {
		DbgPrint("SpoofXamChallenge - Dumped chal buffer");
	}
	//Sleep(3000); //Allow time for the write flush
	//HalReturnToFirmware(HalResetSMCRoutine);
#endif


	//Verify the challenge code is the same as what we are supporting.
	BYTE cHash[XECRYPT_SHA_DIGEST_SIZE];
	XeCryptSha(pBuffer, *(DWORD*)(pBuffer + 0xC), NULL, NULL, NULL, NULL, cHash, XECRYPT_SHA_DIGEST_SIZE);
	if (memcmp(cHash, SupportedXAMChallengeHash, XECRYPT_SHA_DIGEST_SIZE) != 0) 
	{
		//xam chal updated, tell customers to let us know.
		DbgPrint("New XAM challenge detected!\r\n");
		XNotifyUI(L"An error occurred in apollo and you cannot go online at this time. Please mention error XCUPD to apollo support.");
		#ifdef _DEBUG
			// We want to dump our xam buffer to compare
			//DebugBreak();
			if(CWriteFile(RunningFromUSB ? PATH_CHAL_DUMP_USB : PATH_CHAL_DUMP_HDD, pBuffer, dwFileSize) == FALSE) {
				DbgPrint("SpoofXamChallenge - Failed to dump new chal buffer");
			} else {
				DbgPrint("SpoofXamChallenge - Dumped new challenge");
			}
		#endif
		Sleep(10000);
	    HalReturnToFirmware(HalResetSMCRoutine);
	}

	if(!isAuthed){
		for(int i=0; i<4 && !isAuthed; i++){
			Sleep(1000);
		}
		if(!isAuthed){
		//while(fReboot){}
			return (QWORD)0xC000009A;
			/*XNotifyUI(L"An error occurred in apollo (XCSRVCF), restarting...");
			Sleep(5500);
			HalReturnToFirmware(HalFatalErrorRebootRoutine);
			return 0;*/
		}
	}


	//PBYTE hvTemp=hvChal+0x1000;
	//memcpy(hvTemp, hvChal, 0x1000);

	//DWORD ret = XeKeysExecute( hvTemp, 0x1000, (PVOID)MmGetPhysicalAddress(Salt), 0, 0,0);
	//DWORD ret = fakeXeKeysExecute( hvTemp, 0x1000, (QWORD)MmGetPhysicalAddress(Salt), 0, 0,0);
	//if(ret!=0){
	//	HalReturnToFirmware(HalFatalErrorRebootRoutine);
	//	return 0;
	//}
	

	
	// Setup our request
	memcpy(chalRequest.SessionKey, seshKey, 16);
	memcpy(chalRequest.Salt, Salt, 16);
	chalRequest.Crl = crl;
	chalRequest.Fcrt = fcrt;
	chalRequest.Type1Kv = type1KV;
	//chalRequest.ECC = *(WORD*)&hvTemp[0x20];
	chalRequest.ECC = 0;

	//cut off server status update for more important things, avoid conflicts

	// Send our request and recieve our response
	for(int i=0; i<10; i++){
		if(SendCommand(XSTL_SERVER_COMMAND_ID_GET_CHAL_RESPONSE, &chalRequest, sizeof(SERVER_CHAL_REQUEST), pChalResponse, sizeof(SERVER_CHAL_RESPONSE)) == ERROR_SUCCESS) 
			break;
		if(i==2 && isAuthed){
			DbgPrint("SpoofXamChallenge - SendCommand failed");
			XNotifyUI(L"An error occurred in apollo (XCSRVCF), restarting...");
			Sleep(3000);
			HalReturnToFirmware(HalFatalErrorRebootRoutine);
			return 0;
		}
		Sleep(300);
	}

	// Check our response
	if(pChalResponse->Status != XSTL_STATUS_SUCCESS && pChalResponse->Status != XSTL_STATUS_STEALTHED) {
		DbgPrint("SpoofXamChallenge - Unrecognized status");
		XNotifyUI(L"An error occurred in apollo (XCURS), restarting...");
		Sleep(8000);
		HalReturnToFirmware(HalFatalErrorRebootRoutine);
		return 0;
	}

	// Now we can clear our result and fix any other variables
	pChalResponse->Status = 0;
	pXamChalResp->dwUpdateSequence = dwUpdateSequence;
	memcpy(pXamChalResp->bCpuKeyDigest, cpuKeyDigest, XECRYPT_SHA_DIGEST_SIZE);
	memcpy(pXamChalResp->bRandomData, hvRandomData, 0x80);

	//pXamChalResp->hvExAddr = (WORD)((((DWORD)MmGetPhysicalAddress(pBuffer) + 0x400) & 0xFFFF0000) >> 16);  //dynamic way, but hide it for now..

#ifdef DUMP_XAM_BUFFER
	// We want to dump our xam buffer to compare
	//DebugBreak();
	if(CWriteFile(RunningFromUSB ? PATH_XAM_DUMP_USB : PATH_XAM_DUMP_HDD, pBuffer + 0x20, 0x100) == FALSE) {
		DbgPrint("SpoofXamChallenge - Failed to dump xam buffer");
	} else {
		DbgPrint("SpoofXamChallenge - Dumped xam buffer");
	}
	Sleep(3000); //Allow time for the write flush
	HalReturnToFirmware(HalResetSMCRoutine);
#endif

	if (!SanityCheckXamBuffer(pXamChalResp))
	{
		DbgPrint("SpoofXamChallenge - Sanity check failed");
		XNotifyUI(L"An error occurred in apollo (XCSCF), restarting...");
		Sleep(7000);
		HalReturnToFirmware(HalFatalErrorRebootRoutine);
		return 0;
	}

	DbgPrint("XAM spoofed.");

	// All done
	crl = TRUE;
	if(!hasChallenged){
		hasChallenged = TRUE;
		if(isBypassed){
			XNotifyUI(L"Apollo Live - Bypasses Complete / XOSC Complete
");
		}else{
			isPlatinum ? XNotifyUI(L")%SERVER_CONSOLEmsg=3line%") : XNotifyUI(L"XOS Challenge Spoofed!");
		}
		//NotifyUserTime();
	}
	return 0;
}

QWORD XeKeysExecuteHook(VOID* pBuffer, DWORD dwFileSize, QWORD Input1, QWORD Input2, QWORD Input3, QWORD Input4) {
	
	return SpoofXamChallenge((BYTE*)pBuffer, dwFileSize, (BYTE*)Input1, Input2, Input3, Input4);
}

DWORD XexLoadImageFromMemoryHook(VOID* Image, DWORD ImageSize, const CHAR* ImageName, DWORD LoadFlags, DWORD Version, HMODULE* ModuleHandle) {
    
	if (memcmp(ImageName, "xosc", 4) == 0) 
	{
		if (isPlatinum)
		{
			//Verify the challenge code is the same as what we are supporting.
			BYTE cHash[XECRYPT_SHA_DIGEST_SIZE];
			XeCryptSha((BYTE*)Image, ImageSize, NULL, NULL, NULL, NULL, cHash, XECRYPT_SHA_DIGEST_SIZE);
			if (memcmp(cHash, SupportedXOSCChallengeHash, XECRYPT_SHA_DIGEST_SIZE) == 0)
			{
			    if(!isAuthed){
					XNotifyUI(L"An error occurred in apollo (SVCSRVCF), restarting...");
					Sleep(6000);
					HalReturnToFirmware(HalFatalErrorRebootRoutine);
					return E_FAIL;
				}
				*ModuleHandle = (HMODULE)hXBLS;
				DbgPrint("XOSC hooked.");
			} 
			else 
			{
				DbgPrint("New XOSC challenge detected!");
			    //xosc chal updated, tell customers to let us know.
			    XNotifyUI(L"An error occurred in XBLS and you cannot go online at this time. Please mention error SVCUPD to apollo support.");
				Sleep(10000);
			    HalReturnToFirmware(HalResetSMCRoutine);
			}
			return 0;
		}
		else DbgPrint("XOSC not hooked (not platinum).");
	}
	
	// Load image from memory like normal
	return XexLoadImageFromMemory(Image, ImageSize, ImageName, LoadFlags, Version, (PHANDLE)ModuleHandle);
}

VOID* RtlImageXexHeaderFieldHook(VOID* headerBase, DWORD imageKey) {

	// Call it like normal
	VOID* retVal = RtlImageXexHeaderField(headerBase, imageKey);
	
	// See if we are looking for our Execution ID and if its found lets patch it if we must
	if(imageKey == 0x40006 && retVal)
	{
		switch (((XEX_EXECUTION_ID*)retVal)->TitleID)
		{
			case 0xFFFF0055: //Xex Menu
			case 0xC0DE9999: //Xex Menu alt
			case 0xFFFE07FF: //XShellXDK
				{
					SetMemory(retVal, &xeExecutionIdSpoof, sizeof(XEX_EXECUTION_ID));
					break;
				}
		}
	} 
	else if(imageKey == 0x40006 && !retVal) 
	{
		// We couldn't find an execution id so lets return ours
		retVal = &xeExecutionIdSpoof;
	}

	// Return like normal
	return retVal;
}

NTSTATUS XexLoadImageHook(LPCSTR szXexName, DWORD dwModuleTypeFlags, DWORD dwMinimumVersion, PHANDLE pHandle)
{
	// Call our load function with our own handle pointer, just in case the original is null
	HANDLE mHandle = NULL;
	NTSTATUS result = XexLoadImage(szXexName, dwModuleTypeFlags, dwMinimumVersion, &mHandle);
	if (pHandle != NULL) *pHandle = mHandle;
	// If successesful, let's do our patches, passing our handle
	if (NT_SUCCESS(result)) InitializeTitleSpecificHooks((PLDR_DATA_TABLE_ENTRY)mHandle);	
	// All done
	return result;
}

NTSTATUS XexLoadExecutableHook(PCHAR szXexName, PHANDLE pHandle, DWORD dwModuleTypeFlags, DWORD dwMinimumVersion) 
{
	// Call our load function with our own handle pointer, just in case the original is null
	HANDLE mHandle = NULL;
	NTSTATUS result = XexLoadExecutable(szXexName, &mHandle, dwModuleTypeFlags, dwMinimumVersion);
	if (pHandle != NULL) *pHandle = mHandle;
	// If successesful, let's do our patches, passing our handle
	if (NT_SUCCESS(result)) InitializeTitleSpecificHooks((PLDR_DATA_TABLE_ENTRY)*XexExecutableModuleHandle);		
	// All done
	return result;
}

BOOL XexCheckExecutablePrivilegeHook(DWORD priv) {

	// Allow insecure sockets for all titles
	if(priv == 6)
		return TRUE;

	return XexCheckExecutablePrivilege(priv);
}

void patchXamQosHang(){
	DWORD nop = 0x60000000;
	if(IsDevkit){ //16547
		SetMemory((PVOID)0x8189B160, &nop, sizeof(DWORD));
		SetMemory((PVOID)0x8189B058, &nop, sizeof(DWORD));
	}
}




/*VOID __declspec(naked) NetDll_XnpSaveMachineAccountSaveVar(VOID)
{
	__asm
	{
			li r3,745
			nop 
			nop 
			nop 
			nop 
			nop 
			nop 
			blr 
	} 
}

typedef HRESULT (*pNetDll_XnpSaveMachineAccount)(DWORD xamDebugLvl, PBYTE machineAcct);
//pNetDll_XnpSaveMachineAccount NetDll_XnpSaveMachineAccount = (pNetDll_XnpSaveMachineAccount)ResolveFunction(NAME_XAM, 107);
pNetDll_XnpSaveMachineAccount NetDll_XnpSaveMachineAccount = (pNetDll_XnpSaveMachineAccount)NetDll_XnpSaveMachineAccountSaveVar;
static DWORD NetDll_XnpSaveMachineAccountOld[4];

HRESULT NetDll_XnpSaveMachineAccountHook(DWORD xamDebugLvl, PBYTE machineAcct){

	BYTE gamertagSha[0x10];
	XeCryptRandom(gamertagSha, 0x10);

	BYTE temp=0;
	for(int i=0; i<0x5; i++){
		temp=(gamertagSha[i]&0xE)+'0';
		SetMemory(&machineAcct[0x31+i], &temp, 1);
	}
	BYTE checksum=0;
	temp=0;
	for(int i=0; i<11; i++){
		SetMemory(&temp, &machineAcct[0x2B+i], 1);
		checksum+=temp-'0';
	}
	checksum%=10;
	SetMemory(&machineAcct[0x36], &checksum, 1);

	return NetDll_XnpSaveMachineAccount(2, machineAcct);
}*/




BOOL InitializeSystemXexHooks(){

	// Patch xam's call to XexLoadImageFromMemory
	if(PatchModuleImport(NAME_XAM, NAME_KERNEL, 410, (DWORD)XexLoadImageFromMemoryHook) != S_OK) return S_FALSE;

	// Patch xam's call to XexLoadExecutable
	if (PatchModuleImport(NAME_XAM, NAME_KERNEL, 408, (DWORD)XexLoadExecutableHook) != S_OK) return S_FALSE;

	// Patch xam's call to XexLoadImage
	if (PatchModuleImport(NAME_XAM, NAME_KERNEL, 409, (DWORD)XexLoadImageHook) != S_OK) return S_FALSE;

	// Patch xam's call to XeKeysExecute
	if (PatchModuleImport(NAME_XAM, NAME_KERNEL, 0x25F, (DWORD)XeKeysExecuteHook) != S_OK) return S_FALSE;

	return TRUE;
}

BOOL InitializeSystemHooks() {

	// Setup our static execution id
	DWORD ver = ((XboxKrnlVersion->Major & 0xF) << 28) | ((XboxKrnlVersion->Minor & 0xF) << 24) | (XboxKrnlVersion->Build << 8) | (XboxKrnlVersion->Qfe);
	ZeroMemory(&xeExecutionIdSpoof, sizeof(XEX_EXECUTION_ID));
	xeExecutionIdSpoof.Version = ver;
	xeExecutionIdSpoof.BaseVersion = ver;
	xeExecutionIdSpoof.TitleID = 0xFFFE07D1;

	// Patch xam's call to RtlImageXexHeaderField
	if (PatchModuleImport(NAME_XAM, NAME_KERNEL, 0x12B, (DWORD)RtlImageXexHeaderFieldHook) != S_OK) return S_FALSE;

	// Patch xam's call to XexCheckExecutablePrivilege
	if (PatchModuleImport(NAME_XAM, NAME_KERNEL, 404, (DWORD)XexCheckExecutablePrivilegeHook) != S_OK) return S_FALSE;	

	// Test Patch xam's call to NetDll_XnpSaveMachineAccountHook
	//hookFunctionStart((PDWORD)ResolveFunction(NAME_XAM, 107),(PDWORD)NetDll_XnpSaveMachineAccountSaveVar,NetDll_XnpSaveMachineAccountOld,(DWORD)NetDll_XnpSaveMachineAccountHook);
	
	//fix random game crashes on devkits
	patchXamQosHang();

	// All done
	return TRUE;
}

